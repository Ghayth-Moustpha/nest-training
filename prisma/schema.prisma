
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  fname       String 
  lname       String     
  active      Boolean   @default(false) 
  password    String
  profile     Profile?
  admin       Admin?    @relation("AdminUser") 
  teacher     Teacher?  @relation("TeacherUser") 
  student     Student?  @relation("StudentUser") 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("users")
}


model Profile {
  id          Int       @id @default(autoincrement())
  image       String?
  bio         String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
}

model Admin {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation("AdminUser", fields: [userId], references: [id])
  blogs       Blog[]    @relation("AdminBlogs") // Add this relation field

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("admins")
}


model Teacher {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation("TeacherUser", fields: [userId], references: [id])
  courses     Course[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @default("Mr") 
  @@map("teachers")
}

model Student {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation("StudentUser", fields: [userId], references: [id])
  courses     CourseEnrollment[]
  payments    Payment[]
  assignments Assignment[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("students")
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  teacherId   Int
  cost        Int     @default(0)
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  type        String    @default("Online") // Course type: Online, In-person, Hybrid
  categories  CourseCategory[]
  materials   Material[]
  assignments Assignment[]
  enrollments CourseEnrollment[]
  payments    Payment[]
  imageUrl    String?   // New field for storing image URL
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startDate   DateTime  @default(now()) 
  hours       Float     @default(15) 
  status      String    @default ("upcoming") 
  @@map("courses")
}

model Material {
  id          Int       @id @default(autoincrement())
  type        String    // (e.g., PDF, Video, Link)
  url         String
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("materials")
}

model Assignment {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  deadline    DateTime
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  studentId   Int
  student     Student   @relation(fields: [studentId], references: [id])
  status      String    // (e.g., Submitted, Graded)
  grade       Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("assignments")
}

model CourseEnrollment {
  id          Int       @id @default(autoincrement())
  courseId    Int
  studentId   Int
  course      Course    @relation(fields: [courseId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  createdAt   DateTime  @default(now())

  @@unique([courseId, studentId])
  @@map("course_enrollments")
}

model Payment {
  id          Int       @id @default(autoincrement())
  amount      Float
  status      String    // (e.g., Pending, Completed, Failed)
  method      String    // (e.g., Credit Card, PayPal)
  courseId    Int
  studentId   Int
  course      Course    @relation(fields: [courseId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("payments")
}

model Advertisement {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  url         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("advertisements")
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  imageURL    String 
  author      Admin    @relation("AdminBlogs", fields: [adminId], references: [id]) // Specify the reverse relation name
  adminId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String    @default("no description") 
  imageURL    String    
  courses     CourseCategory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}
model CourseCategory {
  id          Int       @id @default(autoincrement())
  courseId    Int
  categoryId  Int
  course      Course    @relation(fields: [courseId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@unique([courseId, categoryId]) // Ensure unique course-category pair
  @@map("course_categories")
}

